package project1;
import java.util.*;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

public class FirstApplication {
	
	private static Scanner sc = new Scanner(System.in);
	private static String rootFolderPath = "F:\\simplilearn\\project1\\project1\\Virtual_Key_Repository";
	private static String fileName = null;
	private static int fileCount = 0;
	private static Path myFile;
	private static List<File> listFile = new ArrayList<File>();
	
	private static void welcomePage()
	{
		System.out.println("=======================================================");
		System.out.println("<=      Welcome To Virtual Key Repository            =>");
		System.out.println("<=      Full Stack Developer Name: Swapnil Devkar    =>");
		System.out.println("=======================================================");
		
		System.out.println("");
		System.out.println("Press Enter key to continue...");
		
		try
        {
            System.in.read();
        }  
        catch(Exception e)
        {
        	System.out.println("Exception:"+e);
        }
	}
	
	private static void showAllFiles(File[] f,int i,int v)
	{
		if(i == f.length)
		{
			System.out.println("Folder is empty");
			return;
		}
		
		for(int j=0;j < v;j++)
		{
			System.out.print("\t");
		}
		
		//check file
		if(f[i].isFile())
		{
			System.out.println(f[i].getName());
		}
		else if(f[i].isDirectory())
		{
			System.out.println(f[i].getName());
			//recursive call same function
			//showAllFiles(f[i].listFiles(),0,v+1);
		}
		
		//recursive call same function
		showAllFiles(f,i+1,v);
	}
	
	private static int mainMenuPage()
	{
		int usrChosMain = 0;
		
			System.out.println("=======================================================");
			System.out.println("<=                    Main Menu                      =>");
			System.out.println("=======================================================");
			System.out.println("1. Display All File in Ascending order");
			System.out.println("2. Perform File Operations");
			System.out.println("3. Close the Application");
			System.out.println("=======================================================");
			System.out.print("Choose Your Option:");
			usrChosMain = sc.nextInt();
			return usrChosMain;
	}
	
	private static void addFile() throws IOException{
		Path filePath = Paths.get(rootFolderPath, fileName);
		
		if(Files.notExists(filePath))
		{ 
			Files.createFile(filePath);
			System.out.println("-----------------------------------------------------------------");
			System.out.println(fileName+" File Successfully Added");
			System.out.println("-----------------------------------------------------------------");
			fileListing(); //fileListing after adding file 
			Collections.sort(listFile); //sort files in ascending order
		}
		else {
			System.out.println("-----------------------------------------------------------------");
			System.out.println(fileName+" File already exists");
			System.out.println("-----------------------------------------------------------------");
		}				
	}
	
	private static void fileListing() {
		int count = 0;
		
		File folderFiles = new File(rootFolderPath);
		
		for(File file : folderFiles.listFiles()) {
			listFile.add(file);
			count++;
		}
		
		fileCount = count;
		
	}
	
private static void deleteFile() throws IOException {
		
		File folderFiles = new File(rootFolderPath);		
		
		if(Files.exists(myFile)) 
		{
			System.out.println("Press y to delete file:");
			String usrInput = sc.next();
			
			if(usrInput.equalsIgnoreCase("y")) 
			{
				for(File f : folderFiles.listFiles()) {
					if(f.getCanonicalFile().getName().equals(myFile.getFileName().toString())) 
					{
						Files.deleteIfExists(myFile);
						System.out.println("-----------------------------------------------------------------");
	        			System.out.println(myFile+" File Successfully Deleted");
	        			System.out.println("-----------------------------------------------------------------");
						fileListing(); //fileListing after delete file
						Collections.sort(listFile); //sort files in ascending order						
					}
				
				}
			}
			else {
				System.out.println("File Not Delete");				
				}
		}
		else
			System.out.println("File not found in " + folderFiles);
		
	}
	
	private static void searchFile() {
		
		File folderFiles = new File(rootFolderPath);
		boolean isFileExist = true;		
			
			for(File f : folderFiles.listFiles()) 
			{				
				try {
					if(f.getCanonicalFile().getName().equals(myFile.getFileName().toString())) {
						System.out.println("-----------------------------------------------------------------");
						System.out.println(myFile.getFileName().toString() + " exist in " + folderFiles);
	        			System.out.println("-----------------------------------------------------------------");
						isFileExist = false;
						break;
					}
				} catch (IOException e) {					
					System.out.println("Error:"+e);
				}				
			}				
			
		if(isFileExist != false)
		{
			System.out.println(myFile.getFileName().toString() + " Not exist in " + folderFiles);
		}
		
	}

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		boolean isInLoop = true;
		int getusrinput,nestedgetusrinput;
		welcomePage();
		while(isInLoop)
		{
	        getusrinput = mainMenuPage();
	        
	        switch(getusrinput)
	        {
	            case 1:
	            	File fobj = new File(rootFolderPath);
	        		FirstApplication obj = new FirstApplication();
	        		if(fobj.exists() && fobj.isDirectory())
	        		{
	        			File f[] = fobj.listFiles();
	        			System.out.println("-----------------------------------------------------------------");
	        			System.out.println("Show All Files in Directory:"+fobj);
	        			System.out.println("-----------------------------------------------------------------");
	        			showAllFiles(f, 0, 0);
	        		}
	        		break;
	            case 2:
	            	System.out.println("1. Add File");
		            System.out.println("2. Delete File");
		            System.out.println("3. Search File");
		            System.out.println("4. Back");
		            System.out.print("Choose Your Option:");
		            nestedgetusrinput = sc.nextInt();
		            switch(nestedgetusrinput)
		            {
		            	case 1:
		            		System.out.println("Enter Add File Name:");
		            		fileName = sc.next();
							myFile = Paths.get(rootFolderPath + "\\" + fileName);						
							addFile();
		            		break;
		            	case 2:
		            		System.out.println("Enter Delete File Name:");
		            		fileName = sc.next();
		            		myFile = Paths.get(rootFolderPath + "\\" + fileName);
		            		deleteFile();
		            		break;
		            	case 3:
		            		System.out.println("Enter Search File Name:");
		            		fileName = sc.next();
							myFile = Paths.get(rootFolderPath + "\\" + fileName);
							searchFile();
		            		break;
		            	case 4:
		            		isInLoop = false;
		            		mainMenuPage();
		            		break;
		            	default:
		            		System.out.println("Please Choose Valid Option");
		            		break;
		            }
		            break;
	            case 3:
	            	System.out.println("Application Close");				
					System.exit(1);
	            default:
	            	System.out.println("Please Choose Valid Option");
	            	break;
	        }
		}
	}

}
